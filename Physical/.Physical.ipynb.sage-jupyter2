{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-bd382bae-dd52-491d-b61e-35a301d9a024.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"nbgrader":{"__altered":false,"__hash":-335098374,"_root":{"entries":[["cocalc_minimal_stubs",false]],"ownerID":{}},"cocalc_minimal_stubs":false,"size":1}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"2e8ba7","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"86d306","input":"risk3=pd.read_excel(SOURCE,sheet_name=TABLES[5],index_col=0,skiprows=1,skipfooter=8)\nrisk3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Men</th>\n      <th>Women</th>\n      <th>Persons</th>\n    </tr>\n    <tr>\n      <th>Population characteristics</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Age group (years)(a)(b)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>18–24</th>\n      <td>45.4</td>\n      <td>50.7</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>25–34</th>\n      <td>43.9</td>\n      <td>49</td>\n      <td>46.5</td>\n    </tr>\n    <tr>\n      <th>35–44</th>\n      <td>53.3</td>\n      <td>53.6</td>\n      <td>53.4</td>\n    </tr>\n    <tr>\n      <th>45–54</th>\n      <td>56.8</td>\n      <td>56.2</td>\n      <td>56.6</td>\n    </tr>\n    <tr>\n      <th>55–64</th>\n      <td>54</td>\n      <td>59.7</td>\n      <td>56.5</td>\n    </tr>\n    <tr>\n      <th>65+</th>\n      <td>73.5</td>\n      <td>76.9</td>\n      <td>75.0</td>\n    </tr>\n    <tr>\n      <th>All persons (18–64)</th>\n      <td>50.6</td>\n      <td>53.7</td>\n      <td>52.2</td>\n    </tr>\n    <tr>\n      <th>All persons (18+)</th>\n      <td>—</td>\n      <td>—</td>\n      <td>56.4</td>\n    </tr>\n    <tr>\n      <th>Remoteness(a)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Major cities</th>\n      <td>47</td>\n      <td>52.4</td>\n      <td>49.7</td>\n    </tr>\n    <tr>\n      <th>Inner regional</th>\n      <td>59.1</td>\n      <td>56.7</td>\n      <td>57.9</td>\n    </tr>\n    <tr>\n      <th>Outer regional and remote</th>\n      <td>63.9</td>\n      <td>57.4</td>\n      <td>60.3</td>\n    </tr>\n    <tr>\n      <th>Socioeconomic status(a)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q1 (most disadvantaged)</th>\n      <td>59.6</td>\n      <td>66.1</td>\n      <td>62.6</td>\n    </tr>\n    <tr>\n      <th>Q2</th>\n      <td>59</td>\n      <td>54.1</td>\n      <td>56.7</td>\n    </tr>\n    <tr>\n      <th>Q3</th>\n      <td>55.4</td>\n      <td>55.5</td>\n      <td>55.5</td>\n    </tr>\n    <tr>\n      <th>Q4</th>\n      <td>44.4</td>\n      <td>51</td>\n      <td>47.3</td>\n    </tr>\n    <tr>\n      <th>Q5 (least disadvantaged)</th>\n      <td>37.7</td>\n      <td>42.6</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>Time series (c)(d)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2007–08</th>\n      <td>—</td>\n      <td>—</td>\n      <td>49.1</td>\n    </tr>\n    <tr>\n      <th>2011–12</th>\n      <td>—</td>\n      <td>—</td>\n      <td>45.3</td>\n    </tr>\n    <tr>\n      <th>2014–15</th>\n      <td>—</td>\n      <td>—</td>\n      <td>44.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                             Men Women  Persons\nPopulation characteristics                     \nAge group (years)(a)(b)      NaN   NaN      NaN\n18–24                       45.4  50.7     48.0\n25–34                       43.9    49     46.5\n35–44                       53.3  53.6     53.4\n45–54                       56.8  56.2     56.6\n55–64                         54  59.7     56.5\n65+                         73.5  76.9     75.0\nAll persons (18–64)         50.6  53.7     52.2\nAll persons (18+)              —     —     56.4\nRemoteness(a)                NaN   NaN      NaN\nMajor cities                  47  52.4     49.7\nInner regional              59.1  56.7     57.9\nOuter regional and remote   63.9  57.4     60.3\nSocioeconomic status(a)      NaN   NaN      NaN\nQ1 (most disadvantaged)     59.6  66.1     62.6\nQ2                            59  54.1     56.7\nQ3                          55.4  55.5     55.5\nQ4                          44.4    51     47.3\nQ5 (least disadvantaged)    37.7  42.6     40.0\nTime series (c)(d)           NaN   NaN      NaN\n2007–08                        —     —     49.1\n2011–12                        —     —     45.3\n2014–15                        —     —     44.3"},"exec_count":10,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"1348d2","input":"#loc attribute to return one or more specified row(s)\nunicode=risk3.loc['All persons (18+)','Men']\ndash_like=ord(unicode)\ncodechar=chr(dash_like)\ncodechar\n","output":{"0":{"data":{"text/plain":"'—'"},"exec_count":11,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"1a8d2d","input":"def load_and_clean(tablenum):\n    data=pd.read_excel(SOURCE,sheet_name=tablenum,skiprows=1,index_col=0,usecols=range(0,4),na_values=chr(8212),dtype={'Men':np.float64,'Women':np.float64,'Persons':np.float64})\n    removenan=data.dropna(axis=0,how='all')\n    return removenan\n\nload_and_clean(5)","metadata":{"deletable":false,"nbgrader":{"cell_type":"code","checksum":"a4788a85996d5aa1a5d2597064c11101","grade":false,"grade_id":"1a8d2d","locked":false,"schema_version":3,"solution":true,"task":false}},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Men</th>\n      <th>Women</th>\n      <th>Persons</th>\n    </tr>\n    <tr>\n      <th>Population characteristics</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18–24</th>\n      <td>45.4</td>\n      <td>50.7</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>25–34</th>\n      <td>43.9</td>\n      <td>49.0</td>\n      <td>46.5</td>\n    </tr>\n    <tr>\n      <th>35–44</th>\n      <td>53.3</td>\n      <td>53.6</td>\n      <td>53.4</td>\n    </tr>\n    <tr>\n      <th>45–54</th>\n      <td>56.8</td>\n      <td>56.2</td>\n      <td>56.6</td>\n    </tr>\n    <tr>\n      <th>55–64</th>\n      <td>54.0</td>\n      <td>59.7</td>\n      <td>56.5</td>\n    </tr>\n    <tr>\n      <th>65+</th>\n      <td>73.5</td>\n      <td>76.9</td>\n      <td>75.0</td>\n    </tr>\n    <tr>\n      <th>All persons (18–64)</th>\n      <td>50.6</td>\n      <td>53.7</td>\n      <td>52.2</td>\n    </tr>\n    <tr>\n      <th>All persons (18+)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>56.4</td>\n    </tr>\n    <tr>\n      <th>Major cities</th>\n      <td>47.0</td>\n      <td>52.4</td>\n      <td>49.7</td>\n    </tr>\n    <tr>\n      <th>Inner regional</th>\n      <td>59.1</td>\n      <td>56.7</td>\n      <td>57.9</td>\n    </tr>\n    <tr>\n      <th>Outer regional and remote</th>\n      <td>63.9</td>\n      <td>57.4</td>\n      <td>60.3</td>\n    </tr>\n    <tr>\n      <th>Q1 (most disadvantaged)</th>\n      <td>59.6</td>\n      <td>66.1</td>\n      <td>62.6</td>\n    </tr>\n    <tr>\n      <th>Q2</th>\n      <td>59.0</td>\n      <td>54.1</td>\n      <td>56.7</td>\n    </tr>\n    <tr>\n      <th>Q3</th>\n      <td>55.4</td>\n      <td>55.5</td>\n      <td>55.5</td>\n    </tr>\n    <tr>\n      <th>Q4</th>\n      <td>44.4</td>\n      <td>51.0</td>\n      <td>47.3</td>\n    </tr>\n    <tr>\n      <th>Q5 (least disadvantaged)</th>\n      <td>37.7</td>\n      <td>42.6</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>2007–08</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>49.1</td>\n    </tr>\n    <tr>\n      <th>2011–12</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>45.3</td>\n    </tr>\n    <tr>\n      <th>2014–15</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>44.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                             Men  Women  Persons\nPopulation characteristics                      \n18–24                       45.4   50.7     48.0\n25–34                       43.9   49.0     46.5\n35–44                       53.3   53.6     53.4\n45–54                       56.8   56.2     56.6\n55–64                       54.0   59.7     56.5\n65+                         73.5   76.9     75.0\nAll persons (18–64)         50.6   53.7     52.2\nAll persons (18+)            NaN    NaN     56.4\nMajor cities                47.0   52.4     49.7\nInner regional              59.1   56.7     57.9\nOuter regional and remote   63.9   57.4     60.3\nQ1 (most disadvantaged)     59.6   66.1     62.6\nQ2                          59.0   54.1     56.7\nQ3                          55.4   55.5     55.5\nQ4                          44.4   51.0     47.3\nQ5 (least disadvantaged)    37.7   42.6     40.0\n2007–08                      NaN    NaN     49.1\n2011–12                      NaN    NaN     45.3\n2014–15                      NaN    NaN     44.3"},"exec_count":12,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"8aadaf","input":"from nose.tools import assert_equal, assert_true\n\nassert_equal(load_and_clean(5).shape, (19, 3))\nassert_equal(load_and_clean(6).shape, (16, 3))\nassert_equal(load_and_clean(5).dtypes[\"Women\"], np.float64)\nassert_true(np.isnan(load_and_clean(5).loc[\"All persons (18+)\",\"Men\"]))\nassert_true(np.isclose(load_and_clean(5).iloc[-1][\"Persons\"],44.3))\nprint(\"So far, so good. Please continue with your own testing.\")\n","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":true,"grade_id":"load_and_clean","locked":true,"points":1,"schema_version":3,"solution":false,"task":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"So far, so good. Please continue with your own testing.\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"adde3f","input":"from matplotlib import pyplot as plt\nimport matplotlib.pyplot as plt\nage_groups.plot()","output":{"0":{"data":{"text/plain":"<AxesSubplot:xlabel='Population characteristics'>"},"exec_count":15,"output_type":"execute_result"},"1":{"data":{"image/png":"d6ea2873e81ae870ac6c0b45506798820cf587aa","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":424,"width":703},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"e0dc93","input":"age_group2=exercise.iloc[[0,1,2,5,4,3]]\n#age_group2.plot()\nage_group2.plot.bar()\n","output":{"0":{"data":{"text/plain":"<AxesSubplot:xlabel='Population characteristics'>"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"e5a7e759f90ec3df6e25aa3813bb29fe1ba64a3f","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":446,"width":703},"needs_background":"light"},"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"8ece2f","input":"index=age_groups.index\nprint(type(index[0]),type(index[0]),type(index[-1]))\nprint(index)","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'str'> <class 'str'> <class 'str'>\nIndex(['18–24', '25–34', '35–44', '45–54', '55–64', '65+'], dtype='object', name='Population characteristics')\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"535309","input":"import re\n#exercise.index[5]\nm = re.match('(\\d+)'+chr(8211)+'(\\d+)', exercise.index[0])\n(m.group(0), m.group(1), m.group(2))","output":{"0":{"data":{"text/plain":"('18–24', '18', '24')"},"exec_count":18,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"eae7ad","input":"re_last = re.match('(\\d+)'+'(\\d+)'+'\\+', exercise.index[5])\nre_last\n","output":{"0":{"data":{"text/plain":"<re.Match object; span=(0, 3), match='65+'>"},"exec_count":19,"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"a24e3f","input":"def get_mid(category):\n    thestring = str(category)                  # safety cast in case the category is passed as the wrong type\n    age_range = re.fullmatch('(\\d+)'+chr(8211)+'(\\d+)', thestring)\n    end_range = re.fullmatch('(\\d+)\\+', thestring)\n    if age_range:\n        return np.mean([int(age_range.group(1)), int(age_range.group(2))])\n    elif end_range:\n        return int(end_range.group(1))+10\n    else:\n        return np.NaN\n\n# Do the following tests give the right answer?\nprint(get_mid(exercise.index[0]))\nprint(get_mid(exercise.index[5]))\nprint(get_mid(exercise.index[6]))","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":false,"grade_id":"a24e3f","locked":true,"schema_version":3,"solution":false,"task":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"21.0\n75\nnan\n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"f15a8b","input":"get_mid(exercise.index[0])","output":{"0":{"data":{"text/plain":"21.0"},"exec_count":21,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"62ca06","input":"exercise.index","output":{"0":{"data":{"text/plain":"Index(['18–24', '25–34', '35–44', '45–54', '55–64', '65+',\n       'All persons (18–64)', 'All persons (18+)', 'Major cities',\n       'Inner regional', 'Outer regional and remote',\n       'Q1 (most disadvantaged)', 'Q2', 'Q3', 'Q4', 'Q5 (least disadvantaged)',\n       '2007–08', '2011–12', '2014–15'],\n      dtype='object', name='Population characteristics')"},"exec_count":22,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"385bf9","input":"exercise_series=exercise.index.to_series()\nexercise_series\n\n##to_series() function create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index\n","output":{"0":{"data":{"text/plain":"Population characteristics\n18–24                                            18–24\n25–34                                            25–34\n35–44                                            35–44\n45–54                                            45–54\n55–64                                            55–64\n65+                                                65+\nAll persons (18–64)                All persons (18–64)\nAll persons (18+)                    All persons (18+)\nMajor cities                              Major cities\nInner regional                          Inner regional\nOuter regional and remote    Outer regional and remote\nQ1 (most disadvantaged)        Q1 (most disadvantaged)\nQ2                                                  Q2\nQ3                                                  Q3\nQ4                                                  Q4\nQ5 (least disadvantaged)      Q5 (least disadvantaged)\n2007–08                                        2007–08\n2011–12                                        2011–12\n2014–15                                        2014–15\nName: Population characteristics, dtype: object"},"exec_count":23,"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"b4ba67","input":"exercise['Midpoints']=exercise_series.apply(get_mid)\nexercise","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Men</th>\n      <th>Women</th>\n      <th>Persons</th>\n      <th>Midpoints</th>\n    </tr>\n    <tr>\n      <th>Population characteristics</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18–24</th>\n      <td>45.4</td>\n      <td>50.7</td>\n      <td>48.0</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>25–34</th>\n      <td>43.9</td>\n      <td>49.0</td>\n      <td>46.5</td>\n      <td>29.5</td>\n    </tr>\n    <tr>\n      <th>35–44</th>\n      <td>53.3</td>\n      <td>53.6</td>\n      <td>53.4</td>\n      <td>39.5</td>\n    </tr>\n    <tr>\n      <th>45–54</th>\n      <td>56.8</td>\n      <td>56.2</td>\n      <td>56.6</td>\n      <td>49.5</td>\n    </tr>\n    <tr>\n      <th>55–64</th>\n      <td>54.0</td>\n      <td>59.7</td>\n      <td>56.5</td>\n      <td>59.5</td>\n    </tr>\n    <tr>\n      <th>65+</th>\n      <td>73.5</td>\n      <td>76.9</td>\n      <td>75.0</td>\n      <td>75.0</td>\n    </tr>\n    <tr>\n      <th>All persons (18–64)</th>\n      <td>50.6</td>\n      <td>53.7</td>\n      <td>52.2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>All persons (18+)</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>56.4</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Major cities</th>\n      <td>47.0</td>\n      <td>52.4</td>\n      <td>49.7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Inner regional</th>\n      <td>59.1</td>\n      <td>56.7</td>\n      <td>57.9</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Outer regional and remote</th>\n      <td>63.9</td>\n      <td>57.4</td>\n      <td>60.3</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q1 (most disadvantaged)</th>\n      <td>59.6</td>\n      <td>66.1</td>\n      <td>62.6</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q2</th>\n      <td>59.0</td>\n      <td>54.1</td>\n      <td>56.7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q3</th>\n      <td>55.4</td>\n      <td>55.5</td>\n      <td>55.5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q4</th>\n      <td>44.4</td>\n      <td>51.0</td>\n      <td>47.3</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Q5 (least disadvantaged)</th>\n      <td>37.7</td>\n      <td>42.6</td>\n      <td>40.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2007–08</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>49.1</td>\n      <td>1007.5</td>\n    </tr>\n    <tr>\n      <th>2011–12</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>45.3</td>\n      <td>1011.5</td>\n    </tr>\n    <tr>\n      <th>2014–15</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>44.3</td>\n      <td>1014.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                             Men  Women  Persons  Midpoints\nPopulation characteristics                                 \n18–24                       45.4   50.7     48.0       21.0\n25–34                       43.9   49.0     46.5       29.5\n35–44                       53.3   53.6     53.4       39.5\n45–54                       56.8   56.2     56.6       49.5\n55–64                       54.0   59.7     56.5       59.5\n65+                         73.5   76.9     75.0       75.0\nAll persons (18–64)         50.6   53.7     52.2        NaN\nAll persons (18+)            NaN    NaN     56.4        NaN\nMajor cities                47.0   52.4     49.7        NaN\nInner regional              59.1   56.7     57.9        NaN\nOuter regional and remote   63.9   57.4     60.3        NaN\nQ1 (most disadvantaged)     59.6   66.1     62.6        NaN\nQ2                          59.0   54.1     56.7        NaN\nQ3                          55.4   55.5     55.5        NaN\nQ4                          44.4   51.0     47.3        NaN\nQ5 (least disadvantaged)    37.7   42.6     40.0        NaN\n2007–08                      NaN    NaN     49.1     1007.5\n2011–12                      NaN    NaN     45.3     1011.5\n2014–15                      NaN    NaN     44.3     1014.5"},"exec_count":24,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"4996af","input":"exercise.index[1]","output":{"0":{"data":{"text/plain":"'25–34'"},"exec_count":25,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"c3214e","input":"filtered = exercise.filter(regex='^18|^25|^35|^45|^55|^65', axis=0)\nfiltered","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Men</th>\n      <th>Women</th>\n      <th>Persons</th>\n      <th>Midpoints</th>\n    </tr>\n    <tr>\n      <th>Population characteristics</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18–24</th>\n      <td>45.4</td>\n      <td>50.7</td>\n      <td>48.0</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>25–34</th>\n      <td>43.9</td>\n      <td>49.0</td>\n      <td>46.5</td>\n      <td>29.5</td>\n    </tr>\n    <tr>\n      <th>35–44</th>\n      <td>53.3</td>\n      <td>53.6</td>\n      <td>53.4</td>\n      <td>39.5</td>\n    </tr>\n    <tr>\n      <th>45–54</th>\n      <td>56.8</td>\n      <td>56.2</td>\n      <td>56.6</td>\n      <td>49.5</td>\n    </tr>\n    <tr>\n      <th>55–64</th>\n      <td>54.0</td>\n      <td>59.7</td>\n      <td>56.5</td>\n      <td>59.5</td>\n    </tr>\n    <tr>\n      <th>65+</th>\n      <td>73.5</td>\n      <td>76.9</td>\n      <td>75.0</td>\n      <td>75.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                             Men  Women  Persons  Midpoints\nPopulation characteristics                                 \n18–24                       45.4   50.7     48.0       21.0\n25–34                       43.9   49.0     46.5       29.5\n35–44                       53.3   53.6     53.4       39.5\n45–54                       56.8   56.2     56.6       49.5\n55–64                       54.0   59.7     56.5       59.5\n65+                         73.5   76.9     75.0       75.0"},"exec_count":26,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"fb7c10","input":"print(filtered.corr(method='pearson'))\nprint(0.918991)\n","output":{"0":{"name":"stdout","output_type":"stream","text":"                Men     Women   Persons  Midpoints\nMen        1.000000  0.966485  0.993077   0.912776\nWomen      0.966485  1.000000  0.989827   0.914830\nPersons    0.993077  0.989827  1.000000   0.918991\nMidpoints  0.912776  0.914830  0.918991   1.000000\n0.918991\n"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"f8118c","input":"def age_correlation (tablenum, quiet=False):\n    exercise=load_and_clean(tablenum)\n    exercise_series=exercise.index.to_series()\n    #print(exercise_series)\n\n    exercise['Midpoint']= exercise_series.apply(get_mid)\n    filtered=exercise.filter(regex='^18|^25|^35|^45|^55|^65|^75', axis=0)\n    pearsons = filtered.corr(method='pearson')\n\n\n    if quiet==False:\n        sheets = []\n        df = pd.read_excel(SOURCE, None)\n        title_new='Risk Factor: '+ TABLES[tablenum][8:]\n        print(title_new)\n        print(filtered)\n        filtered.plot('Midpoint',['Persons','Women','Men'])\n        plt.title( TABLES[tablenum][8:])\n        plt.xlabel('Age')\n        plt.ylabel('Percentage at risk')\n        plt.show()\n        print(pearsons)\n\n\n\n    return pearsons.iloc[3,-2]\n\nage_correlation(4,quiet=False)\n","metadata":{"deletable":false,"nbgrader":{"cell_type":"code","checksum":"83f0226b21a4550e6b6b66af585136e2","grade":false,"grade_id":"age_correlation_q","locked":false,"schema_version":3,"solution":true,"task":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Risk Factor: Smoking\n                             Men  Women  Persons  Midpoint\nPopulation characteristics                                \n18–24                       12.8   15.1     14.2      21.0\n25–34                       22.5   12.1     17.3      29.5\n35–44                       20.1   13.4     16.6      39.5\n45–54                       19.3   15.5     17.7      49.5\n55–64                       17.1   12.4     14.6      59.5\n65–74                       10.5    7.0      8.8      69.5\n75+                          3.6    4.5      3.6      85.0\n"},"1":{"data":{"image/png":"7de2540ec4f181532213bb9c844df393f992d03e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":440,"width":726},"needs_background":"light"},"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"               Men     Women   Persons  Midpoint\nMen       1.000000  0.766774  0.958332 -0.686394\nWomen     0.766774  1.000000  0.916915 -0.823442\nPersons   0.958332  0.916915  1.000000 -0.791604\nMidpoint -0.686394 -0.823442 -0.791604  1.000000\n"},"3":{"data":{"text/plain":"-0.7916042181257857"},"exec_count":28,"output_type":"execute_result"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"6ce953","input":"from nose.tools import assert_equal, assert_true\nassert_true(np.isclose(age_correlation(5, quiet=True), 0.9189906028438024))\nassert_true(np.isclose(age_correlation(6), 0.8973587216790504))\nprint(\"So far, so good. Please continue with your own testing.\")","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":true,"grade_id":"age_correlation_1","locked":true,"points":1,"schema_version":3,"solution":false,"task":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Risk Factor: Dyslipidaemia\n                             Men  Women  Persons  Midpoint\nPopulation characteristics                                \n18–24                       30.9   36.3     33.6      21.0\n25–34                       51.7   51.2     51.5      29.5\n35–44                       69.1   50.0     59.2      39.5\n45–54                       73.8   68.2     70.9      49.5\n55–64                       74.8   83.0     78.9      59.5\n65–74                       78.3   83.5     81.0      69.5\n75+                         73.9   80.8     77.7      85.0\n"},"1":{"data":{"image/png":"d7fc35b1d8b31bc864071edb5cf5ae5fcae9a595","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":29,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"               Men     Women   Persons  Midpoint\nMen       1.000000  0.860321  0.958206  0.803345\nWomen     0.860321  1.000000  0.970156  0.914921\nPersons   0.958206  0.970156  1.000000  0.897359\nMidpoint  0.803345  0.914921  0.897359  1.000000\nSo far, so good. Please continue with your own testing.\n"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"afb982","input":"SOURCE = \"risk-factors-2014-15-source-data.xlsx\"\nTABLES = {3: \"Table 3_Alcohol\",\n          4: \"Table 4_Smoking\",\n          5: \"Table 5_Physical activity\",\n          6: \"Table 6_Dyslipidaemia\",\n         }","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":false,"grade_id":"afb982","locked":true,"schema_version":3,"solution":false,"task":false}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"9d40b2","input":"# Marker use only","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":true,"grade_id":"age_correlation_2","locked":true,"points":1,"schema_version":3,"solution":false,"task":false}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"55eb9a","input":"exercise=load_and_clean(5)\n#exercise[0:6]\nage_groups=exercise.iloc[0:6]\nage_groups","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Men</th>\n      <th>Women</th>\n      <th>Persons</th>\n    </tr>\n    <tr>\n      <th>Population characteristics</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18–24</th>\n      <td>45.4</td>\n      <td>50.7</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>25–34</th>\n      <td>43.9</td>\n      <td>49.0</td>\n      <td>46.5</td>\n    </tr>\n    <tr>\n      <th>35–44</th>\n      <td>53.3</td>\n      <td>53.6</td>\n      <td>53.4</td>\n    </tr>\n    <tr>\n      <th>45–54</th>\n      <td>56.8</td>\n      <td>56.2</td>\n      <td>56.6</td>\n    </tr>\n    <tr>\n      <th>55–64</th>\n      <td>54.0</td>\n      <td>59.7</td>\n      <td>56.5</td>\n    </tr>\n    <tr>\n      <th>65+</th>\n      <td>73.5</td>\n      <td>76.9</td>\n      <td>75.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                             Men  Women  Persons\nPopulation characteristics                      \n18–24                       45.4   50.7     48.0\n25–34                       43.9   49.0     46.5\n35–44                       53.3   53.6     53.4\n45–54                       56.8   56.2     56.6\n55–64                       54.0   59.7     56.5\n65+                         73.5   76.9     75.0"},"exec_count":33,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9d23ac","input":"import pandas as pd","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"12c293","input":"df=pd.read_excel(SOURCE,sheet_name=5,skiprows=1,skipfooter=8,usecols=range(0,4))\ndf.shape","output":{"0":{"data":{"text/plain":"(23, 4)"},"exec_count":5,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e9c9b8","input":"#drop NAN row\nnew_df=df.dropna()\nnew_df.shape","output":{"0":{"data":{"text/plain":"(19, 4)"},"exec_count":6,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"f5374e","input":"new_df.dtypes","output":{"0":{"data":{"text/plain":"Population characteristics     object\nMen                            object\nWomen                          object\nPersons                       float64\ndtype: object"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"8aed6d","input":"import numpy as np","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"d910d9","input":"#risk2=pd.read_excel(SOURCE,sheet_name=5,skiprows=1,index_col=0,skipfooter=8,usecols=range(0,4),dtype={'Men':np.float,'Women':float,'Persons':float})\n","pos":13,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"00388a","input":"Notice that there are now some rows which have all NaNs, and some which have some NaNs and some data.\n\n* Once again use `dropna()` to remove the 'subheader' rows. However this time use '`how`' to ensure that only the correct rows are removed (for example, the \"All persons (18+)\" row should not be removed)\n\nCheck the shape and the dtypes. Are they now what you would expect (the data should all be floats)? If not, ensure they are before proceeding.","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"026de7","input":"### Q1. Putting it all together [1 lab mark]\n\n* Write a function `load_and_clean(tablenum)` that takes a table number and returns a dataframe for that table with:\n  * subheading rows removed\n  * reference section removed\n  * all data as `float64`\n\nYou should ensure this works on tables 3 to 6.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"051081","input":"Out of Alcohol, Smoking, Physical Activity and Dyslipidaemia risks, which would you say has:\n* a strong correlation with age?\n* a moderate correlation with age?\n* a strong negative correlation with age?\n* a moderate negative correlation with age?\n* little or no correlation with age?\n","pos":60,"type":"cell"}
{"cell_type":"markdown","id":"0572e5","input":"## Data selection and visualisation\n\nLet's start with a fresh copy of the physical activity table:\n\n```\nexercise = load_and_clean(5)\n```\n\n* Extract the first 6 rows of the Physical activity table into a new dataframe called `age_groups`.\n\n_Tip: We've used `loc[]` already. Check out the difference between `iloc[]` and `loc[]`._\n\nCheck that your new table is correct.\n\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"072986","input":"You should see quite a different picture.\n\nIn fact, it's a little misleading to plot our (categorical) age data as a line plot - the adjoining lines suggest relationships that don't exist. Better would be something like a bar chart.\n\n* Repeat your original plot, this time using a bar chart. Use the dataframe sorted on the index to ensure the age groups are in the correct order. (Would this work if you had a category over 100?)\n\nNotice how much easier it is with this kind of data (comparing more than one value per category) than using matplotlib to do the bar chart directly.\n\n","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"0aa3ae","input":"## More Practice!\n\nLook for correlations between socioeconomic status and each of the risk factors.\n\nCompare these with the age correlations. Do you find anything surprising?","pos":61,"type":"cell"}
{"cell_type":"markdown","id":"0c757f","input":"The \"subheadings\" in the spreadsheet (such as **Age group (years)**) are just string data. They can be distinguished in our pandas table by the fact that the corresponding data fields contain `np.NaN`.\n\n* Under DataFrame in the pandas API, find the \"**Missing data handling**\" section for Dataframes, and use `dropna()` to drop the subheading rows (those with `NaN` in them).\n\nYour table should now begin with:\n\n```\n                             Men Women  Persons\nPopulation characteristics                     \n18–24                       45.4  50.7     48.0\n25–34                       43.9    49     46.5\n35–44                       53.3  53.6     53.4\n45–54                       56.8  56.2     56.6\n55–64                         54  59.7     56.5\n65+                         73.5  76.9     75.0\nAll persons (18–64)         50.6  53.7     52.2\nAll persons (18+)              —     —     56.4\nMajor cities                  47  52.4     49.7\nInner regional              59.1  56.7     57.9\n...\n```\n\nCheck the shape again and ensure the change in shape is what you expected.\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"106966","input":"* Use Series' `apply()` method, along with the tools above, to create new series called 'mids' that contains the midpoints of the age categories, and `NaN` otherwise. (~1 line of code)\n\nCheck the output on the exercise data, and its type.","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"168c3a","input":"* Use the default `Dataframe.plot()` method on your `age_groups` dataframe and show the results.\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"18958d","input":"### Creating numerical values from the index\n\nWhile the previous line plot was not the best way to look for relationships, we would like to ascertain whether we can quantitatively establish a relationship between age and physical activity.\n\nTo do this, we will convert the index values into numerical values and add them to our table as an extra column.\n\nThe first thing we need to do is get the index. Note that the index is not a regular column of the dataframe.\n\n* Get the index using the '`index`' attribute.\n\n* Print the type of the index, the type of one of the elements of the index, and the index itself.\n\nWhat kind of object is the index?\n\nWhat kind of object is the first element of the index?\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"19830a","input":"Why does our method also return values for the time series data at the end?\n\nWe could refine our regular expression to exclude those, however our function is correctly doing what we asked of it (finding the midpoints)  so we will leave them in. \n\nIt is better practice not to confuse or overburden the role of our function with two quite different tasks: in this case, (1) finding the midpoint of between integers separated by a dash; and (2) deciding which rows of the dataframe we are interested in working with. We will address the latter later.\n\nFinally we can add the column. Check the API for `assign()` and see whether it returns a _copy_ of the dataframe, or modifies the dataframe _in place_. This will determine how you call `assign()`.\n\n* Use `assign(Midpoints = mids)` to create a dataframe with a fourth column named `Midpoints`.\n\nInspect the resulting dataframe. It should now start like this:\n```\n                             Men Women  Persons  Midpoints\nPopulation characteristics                                \n18–24                       45.4  50.7     48.0       21.0\n25–34                       43.9    49     46.5       29.5\n35–44                       53.3  53.6     53.4       39.5\n45–54                       56.8  56.2     56.6       49.5\n55–64                         54  59.7     56.5       59.5\n65+                         73.5  76.9     75.0       75.0\nAll persons (18–64)         50.6  53.7     52.2        NaN\nAll persons (18+)              —     —     56.4        NaN\n...\n```","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"1b2a50","input":"### Correlation\n\nThe most commonly used correlation is Pearson's correlation. A correlation coefficient nearing +1 indicates a very strong correlation. A correlation nearing -1 indicates a very strong inverse correlation. A correlation coefficient near zero suggests little or no correlation.\n\nTo make life easy, dataframes and series include some elementary statistics methods.\n\nDataFrame's `corr()` method produces a correlation matrix of all numerical columns using Pearson's correlation by default.\n\n* Calculate the correlation coefficient matrix for your `ages` table.\n\nWhat is the correlation coefficient between Midpoints and Persons? How would you express your conclusion from this analysis)?","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"2df1fb","input":"You should see three lines that appear to show a strong (though not linear) relationship between age and \"insufficient\" physical activity.\n\nLooking at the x-axis, it might also look as if the dataframe's plot method has worked out that the indices represent age groups on a number line. But don't be fooled!\n\nWe just got lucky! As far as pandas is concerned, they are just independent categories of some sort. It just happens they were in age order in the spreadsheet.\n\nTo verify this, let's see what happens when they're in a different order. Try:\n\n```\nage_groups2 = exercise.iloc[[0,1,2,5,4,3]]    # see what we did there? (recall numpy selection with arrays of indices)\n```\n\nwhere `exercise` is again the cleaned Table 5.\n\nInspect the table and plot the corresponding plot.\n\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"3c286a","input":"#### Adding a new column, and pandas' `Series`\n\nOne way to add a new column to our dataframe is to create the column as a `Series` and then add it using the `assign()` method.\n\nA *Series* is like a 1-dimensional version of a dataframe. You can think of each dataframe column, for example, as a series. A series shares many of the same methods as a dataframe. Have a look at the Series API.\n\nThere is a second benefit to using a series - we can use its `apply()` method (like we did for dataframes in the lectures) to apply our regular expression to all the elements of the index.\n\nLook at the API for `Index` objects.\n\n* Find the method for converting an Index to a Series, read the documentation, and generate a series from the index of Table 5.\n\nHave a look at the resulting series. You should see that a series contains an index of its own (on the left), and a single column (on the right).\n\nThe documentation states: \"Create a Series with both index and values equal to the index keys.\" Can you see this in your result?\n","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"3e5b6f","input":"## Congratulations!! 🏆\n\nYou have now worked through the essential tools to _**do** data science!_","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"59ee71","input":"### Regular expressions\n\nWe'll use a regular expression to extract the numbers so we can calculate the medians. \n\n* Import the '`re`' library, and try the following code (where `exercise` is the name of the dataframe):\n    \n\n```\nm = re.match('(\\d+)'+chr(8211)+'(\\d+)', exercise.index[0])\n(m.group(0), m.group(1), m.group(2))\n```\n\nYou're not expected to memorise the regular expression language, but read through the [`re` library documentation](https://docs.python.org/3/library/re.html) and identify how this works and what each piece does.\n\n","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"62352d","input":"### Q2. Putting it all together [Bonus 2 lab marks]\n\n* Write a function `age_correlation(tablenum, quiet=False)` which:\n  * extracts the clean data for Table `tablenum`\n  * adds a column with \"midpoints\" for the year ranges (as specified above)\n  * filters a new table with the age-range rows only\n  * generates the (Pearson) correlations for the table\n  * returns the correlation between age and Persons\n\n* If `quiet=False` then the function should also produce a \"report\" in which it:\n  * prints an appropriate header for the report (generated from the Excel sheet name)\n  * prints the table with the age-range data\n  * shows a line plot for Persons, Women and Men against age (using age midpoints, not categories), with appropriate title and axis labels\n  * prints the correlation matrix\n  \n\nYour function should work correctly for any of the tables from Table 3 to Table 6.\n\nThe report for Table 5 should look like this:\n\n```\nRisk factor: Physical activity\n\n                             Men  Women  Persons  Midpoints\nPopulation characteristics                                 \n18–24                       45.4   50.7     48.0       21.0\n25–34                       43.9   49.0     46.5       29.5\n35–44                       53.3   53.6     53.4       39.5\n45–54                       56.8   56.2     56.6       49.5\n55–64                       54.0   59.7     56.5       59.5\n65+                         73.5   76.9     75.0       75.0\n```\n\n<div>\n    <img src=\"Physical activity.png\" width=600>\n\n</div>\n\n```\nCorrelations\n                Men     Women   Persons  Midpoints\nMen        1.000000  0.966485  0.993077   0.912776\nWomen      0.966485  1.000000  0.989827   0.914830\nPersons    0.993077  0.989827  1.000000   0.918991\nMidpoints  0.912776  0.914830  0.918991   1.000000\n```\n\n","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"66c3ef","input":"We can now read in the table again (to `risks4)`.\n\n* Use `read_excel()` to read in Table 5, but this time set `na_values` to the correct character.\n\n*Hint: You will need to use `chr()`*.\n    \nHave a look at your dataframe and ensure that the dashes have been replaced by NaN.\n\nCheck that the dtypes are now correct.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"6eb657","input":"You may have used `skipfooter` to exclude the reference notes at the bottom of the table.\n\nHave a look at the other spreadsheets for tables 3 to 6. You should see that the formats are the same, but there are different numbers of notes at the bottom.\n\n`skipfooter` will therefore not work if we want to reuse (_generalise_) the code to work for these other tables in workbook.\n\n* How else might the reference rows be removed?\n\n*Hint: No extra coding needed!*","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"6fabd2","input":"<h3>Lab 10</h3>\n\n## Let's get Physical!\n\n<div>\n    <img src=\"physical_activity_qfacts.png\" width=400><br><br>\n</div>\n\nIn this lab we will investigate some relationships between health risk factors using data from the Australian Government's *[Australian Institute of Health and Welfare](https://www.aihw.gov.au)*. (AIHW)\n\n_Note: This is a shorter lab to finish up with and has a different due date to other labs._\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7933d0","input":"### Visualising relationships\n\nNow that we have numerical data for age groups and physical activity, we can again look for a relationship.\n\n* Use DataFrame's scatter plot with your `ages` table to plot Persons (y) against the age midpoints (x).\n\n(Note the x-ticks do not need to - and shouldn't - match up with the sample points.)","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"85e31e","input":"## Data acquisition and cleaning\n\nGo to the AIHW website and navigate to Reports and Data > Behaviours and Risk factors. Notice that this site provides a range of information on the relationship between behaviours, such as smoking or physical activity, and health risk.\n\nFollow the link to Risk Factors > Reports. Scroll down to \"Risk factors to health\" (2017) and open the report.\n\nHere you will find further information on the five leading risk factors for ill-health. The 'Data' link provides the source data for the study.\n\n* Download the Source Data tables\n\nYou should now have the file `risk-factors-2014-15-source-data.xls`.\n\nOpen the spreadsheet and inspect the table of contents. You should find the nine tables listed on the \"Risk factors to health\" report website.\n\nSave the spreadsheet in `.xslx` format, and upload it to the Health lab directory in CoCalc.\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"87a075","input":"&copy; Cara MacNish","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"87af2b","input":"The following function converts (or \"maps\") an age category to a float representing the midpoint (or 10 higher, for an end range). Otherwise it returns NaN. Follow through the code to understand how it works.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"94df9c","input":"#### dtypes\n\n* Use the DataFrame's `dtypes` attribute to check the data types of your data columns.\n\nWhat do you notice? Why has this occurred?","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"a3fe47","input":"### Reading the data into a `pandas` DataFrame\n\nWe will investigate the data using `pandas`, beginning with the data on physical activity (Table 5). This time we'll take the data directly from the `xlsx` file! (Rather than using a 'flat file' format like csv as an interlingua).\n\nAs usual you will want to start by importing some packages. It is also suggested you start with some constants to ease access to the data. We'll use the following:\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"ade19e","input":"For our numerical values, we'll use the midpoint of the age ranges.\n\nFor 65+ we know that the data spread will be much wider than the previous categories. For such categories we will adopt a policy of setting the 'midpoint' to 10 more than the start of the last category (75 in this case). This is highly _unsatisfactory!_ (Once again it is not clear why they have simply ignored age categories from 65 upwards - don't be responsible for this kind of ageism in your own work!)\n\n> _Q: If we had a model of population against age, how could we better compensate for this omission?_\n\nTo find the midpoints we'll need to parse the age categories. This time we'll do it more elegantly - using regular expressions!","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ade562","input":"### Filtering\n\nDataframe's `filter()` method allows us to get a subset of the dataframe using a regular expression on the index.\n\n* Use `filter()` on the dataframe index to extract a new table, `ages`, that contains only the age ranges (from 18-24 through to 65+ in the case of Table 5).\n\nCheck that your table is correct. It should now contain:\n```\n\n                             Men Women  Persons  Midpoints\nPopulation characteristics                                \n18–24                       45.4  50.7     48.0       21.0\n25–34                       43.9    49     46.5       29.5\n35–44                       53.3  53.6     53.4       39.5\n45–54                       56.8  56.2     56.6       49.5\n55–64                         54  59.7     56.5       59.5\n65+                         73.5  76.9     75.0       75.0\n```\n\n*Hint: You may find the `re` `^` and `|` operators useful for this task.*\n","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"c601fa","input":"Let's see if we can bludgeon pandas into using the 'right' dtype. In fact, since the numbers are not high precision, just for now, let's set them to 32 bit floats and save some storage space. Look for the `dtype` argument in `read_excel` to see how to set the dtype.\n\n- Using the `dtype` argument, explicitly set the dtype for the Men, Women and Persons columns to 32 bit floats. Use a different variable name (eg `risks2`) to avoid confusion with the above table.\n\nWhat do you find and why?","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"cc9047","input":"","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"d45b75","input":"Does it look like there is a relationship?\n\n* Repeat the plot, this time with a line plot.","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"d51301","input":"\nIt should be clear now what the problem was, and why pandas chose the type `Object`. Let's try again.\n\n* Read the table in again using `read_excel()`. This time set the parameter `na_values='-'`. Read the API to see what this does. (You can go back to the default float size.)\n\nAgain, use a different variable name (eg `risks3`) to avoid confusion with the previous table.\n\nCheck the dtypes. Did it work?","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"ddc9b6","input":"* Try writing a regular expression that matches the \"65+\" category (and none of the other categories).\n\n_Tip: + has a special meaning in the regular expression language, so you will need to \"escape\" it to get a literal plus character._\n\n* Generalise this expression as follows:\n  * assume that the last category might be another two digit number, such as 80+\n     * match any two digits followed by '+'.\n  * assume that the last category might be any age (eg 5+ or 105+)\n    * match any one or more digits followed by a '+'.\n\nCheck that all three of your regular expressions find a match on the 5th line in the index, but not on line 4.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"f47846","input":"Open the [pandas API](https://pandas.pydata.org/pandas-docs/stable/reference/index.html) reference, and find **Excel** in the **Input/Output** listing.\nYou should by now be used to reading APIs and anticipating the kinds of arguments you will find in the functions.\n\n* Use `read_excel()` to read in Table 5 using its sheet name, which you can extract from the above TABLES dictionary. (You should use SOURCE and TABLES, not type in the strings.)\n\nYou should use other arguments to ensure that:\n\n  * the first line is skipped over and the second line is used for the *column labels*\n  * only the first 4 columns are included\n  * the first (zeroth) column is used for the *index*\n  * the notes at the bottom are excluded\n\n* Check the table shape, and use the `head()` function to view the table. (Look for how to do both of these in the API.)\n\nIt should contain the following data (but presented in a nicer looking table format):\n\n```\n                             Men Women  Persons\nPopulation characteristics                     \nAge group (years)(a)(b)      NaN   NaN      NaN\n18–24                       45.4  50.7     48.0\n25–34                       43.9    49     46.5\n35–44                       53.3  53.6     53.4\n45–54                       56.8  56.2     56.6\n55–64                         54  59.7     56.5\n65+                         73.5  76.9     75.0\nAll persons (18–64)         50.6  53.7     52.2\nAll persons (18+)              —     —     56.4\nRemoteness(a)                NaN   NaN      NaN\nMajor cities                  47  52.4     49.7\nInner regional              59.1  56.7     57.9\nOuter regional and remote   63.9  57.4     60.3\nSocioeconomic status(a)      NaN   NaN      NaN\nQ1 (most disadvantaged)     59.6  66.1     62.6\nQ2                            59  54.1     56.7\nQ3                          55.4  55.5     55.5\nQ4                          44.4    51     47.3\nQ5 (least disadvantaged)    37.7  42.6     40.0\nTime series (c)(d)           NaN   NaN      NaN\n2007–08                        —     —     49.1\n2011–12                        —     —     45.3\n2014–15                        —     —     44.3\n```\n\nIs the reported shape what you expected?\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"f8c889","input":"This is a good example of the need for caution when trusting \"what you see\" in string or character data.\n\nThere are in fact many kinds of dashes in Unicode, and its very difficult to tell from looking at it what kind of dash the spreadsheet has used.\n\n* Use Dataframe's `loc()` method to extract one of the dashes from your table. (Print it to make sure.)\n\n_Tip: `loc()` can be found under **Indexing, iteration** in the DataFrame API._\n\n* Use python's `ord()` method to find the Unicode number of the character you extracted from the table. What is its Unicode number?\n* To check, use python's `chr()` method to convert the Unicode number back into a character, and print it. Does it match the one above?\n* Is this the same Unicode value as the dash used in the age groups?","pos":16,"type":"cell"}
{"id":0,"time":1666842418758,"type":"user"}
{"last_load":1666842417789,"type":"file"}