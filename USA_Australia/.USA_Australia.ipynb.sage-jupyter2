{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-b1b2ff24-2b80-4962-a06c-aaf524409b85.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"nbgrader":{"__altered":false,"__hash":-335098374,"_root":{"entries":[["cocalc_minimal_stubs",false]],"ownerID":{}},"cocalc_minimal_stubs":false,"size":1}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"512676","input":"","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e489f3","input":"","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"47014e","input":"StudyBuddies = []","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":123,"id":"f0a46b","input":"yr15to19=[]\nyr20to34=[]\nyr35to44=[]\nyr45to54=[]\nyr55to64=[]\nyr65toover=[]\n\nyr20to34_old=[]\nyr65toover_old=[]\n\naus_clean=[]\n\nwith open(AUS_DATA,'r') as file:\n    aus_data=file.read()\nsplit_data=aus_data.splitlines() #split data into age-range and numbers\nage_range=split_data[0].split(',')[1:] #remove AUS_CODE from split_data\nnumbers=split_data[1].split(',')[1:] #remove AUS from numbers\n\n#split age_range according to status\n\n#get data for married\nslice_married=slice(0,len(age_range),6) #get index for married\nmarried=age_range[slice_married][-10:] #get age_range P(male+female)\nmarried_num=numbers[slice_married][-10:] #get married numbers\n\n#get data for seperated\nslice_seperated=slice(1,len(age_range),6)\nseperated=age_range[slice_seperated][-10:]\nseperated_num=numbers[slice_seperated][-10:]\n\n#get data for divorced\nslice_divorced=slice(2,len(age_range),6)\ndivorced=age_range[slice_divorced][-10:]\ndivorced_num=numbers[slice_divorced][-10:]\n\n#get data for widowed\nslice_widowed=slice(3,len(age_range),6)\nwidowed=age_range[slice_widowed][-10:]\nwidowed_num=numbers[slice_widowed][-10:]\n\n#get data for nevermarried\nslice_nevermarried=slice(4,len(age_range),6)\nnevermarried=age_range[slice_nevermarried][-10:]\nnevermarried_num=numbers[slice_nevermarried][-10:]\n\n\nfor i in range(len(married)):\n    age=married[i] # age='P_15_19_yr_Married'\n    get_age_index=age[2:4] #(P_15_19_yr_Married) get the 3rd and 4th character\n\n    if get_age_index == '15': #15to19 age group\n        yr15to19.append(int(married_num[i])) #convert to int\n        yr15to19.append(int(divorced_num[i]))\n        yr15to19.append(int(seperated_num[i]))\n        yr15to19.append(int(nevermarried_num[i]))\n        yr15to19.append(int(widowed_num[i]))\n\n\n    if get_age_index == '20': #20to34 age group(combine 20-24 and 25-34)\n        yr20to34_old.append(int(married_num[i]))\n        yr20to34_old.append(int(divorced_num[i]))\n        yr20to34_old.append(int(seperated_num[i]))\n        yr20to34_old.append(int(nevermarried_num[i]))\n        yr20to34_old.append(int(widowed_num[i]))\n\n    if get_age_index == '25': #20to34 age group(combine 20-24 and 25-34)\n        yr20to34_old.append(int(married_num[i]))\n        yr20to34_old.append(int(divorced_num[i]))\n        yr20to34_old.append(int(seperated_num[i]))\n        yr20to34_old.append(int(nevermarried_num[i]))\n        yr20to34_old.append(int(widowed_num[i]))\n\n    if get_age_index == '35': #35to44 age group\n        yr35to44.append(int(married_num[i])) #convert to int\n        yr35to44.append(int(divorced_num[i]))\n        yr35to44.append(int(seperated_num[i]))\n        yr35to44.append(int(nevermarried_num[i]))\n        yr35to44.append(int(widowed_num[i]))\n\n    if get_age_index == '45': #45to54 age group\n        yr45to54.append(int(married_num[i])) #convert to int\n        yr45to54.append(int(divorced_num[i]))\n        yr45to54.append(int(seperated_num[i]))\n        yr45to54.append(int(nevermarried_num[i]))\n        yr45to54.append(int(widowed_num[i]))\n\n    if get_age_index == '55': #55to64 age group\n        yr55to64.append(int(married_num[i])) #convert to int\n        yr55to64.append(int(divorced_num[i]))\n        yr55to64.append(int(seperated_num[i]))\n        yr55to64.append(int(nevermarried_num[i]))\n        yr55to64.append(int(widowed_num[i]))\n\n    if get_age_index == '65': #65to74 age group\n        yr65toover_old.append(int(married_num[i])) #convert to int\n        yr65toover_old.append(int(divorced_num[i]))\n        yr65toover_old.append(int(seperated_num[i]))\n        yr65toover_old.append(int(nevermarried_num[i]))\n        yr65toover_old.append(int(widowed_num[i]))\n\n    if get_age_index == '75': #65to74 age group\n        yr65toover_old.append(int(married_num[i])) #convert to int\n        yr65toover_old.append(int(divorced_num[i]))\n        yr65toover_old.append(int(seperated_num[i]))\n        yr65toover_old.append(int(nevermarried_num[i]))\n        yr65toover_old.append(int(widowed_num[i]))\n\n    if get_age_index == '85': #65to74 age group\n        yr65toover_old.append(int(married_num[i])) #convert to int\n        yr65toover_old.append(int(divorced_num[i]))\n        yr65toover_old.append(int(seperated_num[i]))\n        yr65toover_old.append(int(nevermarried_num[i]))\n        yr65toover_old.append(int(widowed_num[i]))\n\n#sum every first and fifth index to get the total from each marital status\n#below is the sum for age group (20to24) + (25to34)\n\nfor j in range(5): #we have 5marital status\n    sum_20to34=sum(yr20to34_old[j::5])\n    yr20to34.append(sum_20to34)\n\nfor j in range(5): #we have 5 marital status\n    sum_65toover=sum(yr65toover_old[j::5])\n    yr65toover.append(sum_65toover)\n\naus_clean.append(yr15to19)\naus_clean.append(yr20to34)\naus_clean.append(yr35to44)\naus_clean.append(yr45to54)\naus_clean.append(yr55to64)\n\nprint(aus_clean)\n\n\n\n\n\n\n\n\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[2417, 307, 407, 1454307, 378], [1254145, 68677, 68747, 3807947, 4792], [2107506, 223123, 144296, 999811, 12931], [1953789, 416471, 177080, 661911, 37654], [1836616, 516146, 149044, 405664, 102538]]\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0be475","input":"AUS_DATA = \"2021Census_G05_AUS_AUS.csv\"\nUSA_DATA = \"ACSST5Y2020.S1201-2022-08-31T043539.csv\"","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"456cbb","input":"<h3>Lab 4/5: Assignment</h3>\n\n# USA - Australia Comparison on Census Data\n\n---","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"e69597","input":"\n<hr>\n","metadata":{"deletable":false,"editable":false,"nbgrader":{"grade":false,"grade_id":"assignment","locked":true,"points":15,"schema_version":3,"solution":false,"task":true}},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"fca052","input":"## Declaration\n\nThis declaration should be completed and remain attached to the top of your submission.\n\n*I/we am/are aware of the Universityâ€™s [policy on academic conduct](https://www.uwa.edu.au/policy/-/media/Project/UWA/UWA/Policy-Library/Policy/Student-Administration/Academic-Integrity/Academic-Integrity-Policy.doc) and I declare that this assignment is entirely the work of the author(s) listed below and that suitable acknowledgement has been made for any sources of information used in preparing it. I have retained a hard copy for my own records.*\n\n* Name 1:\n* Student ID 1:\n* Name 2:\n* Student ID 2:\n* Name 3:\n* Student ID 3:\n* Date:\n\nIf the assignment was completed in a group, please enter the student numbers in the \"StudyBuddy\" declaration below:","metadata":{"deletable":false},"pos":1,"type":"cell"}
{"id":0,"time":1662733880093,"type":"user"}
{"last_load":1662733880446,"type":"file"}